# Adrian Pop, adrpo@ida.liu.se, Martin Sj√∂lund, marsj@ida.liu.se
# - Use make -f Makefile.omdev.mingw if you want to compile on Windows/MinGW
# - Please leave the UNIX Makefile as it is if you are not using UNIX/Linux
# If you need to add files, etc, you modify Makefile.common - a common file
# for both UNIX/Linux and Windows platforms.

# Forces the generation of the dgesv sources
NEED_DGESV=1
include Makefile.objs

OMC_MINIMAL_RUNTIME=

CPPFLAGS = -I. -I$(top_builddir)/Compiler/runtime -I$(top_builddir)/3rdParty/gc/include -I$(top_builddir)/3rdParty/FMIL/install/include/ -I$(top_builddir)/3rdParty/lis-1.4.12/include/ -I$(top_builddir)/3rdParty/Ipopt/include/ $(CONFIG_CPPFLAGS) -DGC_REDIRECT_TO_LOCAL -I$(builddir_inc)/c
override CFLAGS += $(CPPFLAGS) $(CONFIG_CFLAGS) $(EXTRA_CFLAGS)

ifeq ($(OMC_MINIMAL_RUNTIME),)
OPTIONAL_LIBS=$(CDASKRDIR)/libcdaskr.a
else
override CFLAGS += -DOMC_MINIMAL_RUNTIME
endif

CXXFLAGS = $(CFLAGS)
FFLAGS  = -O -fexceptions
# P.A: before, g77 had -O3 or -O2 but that caused a bug in DDASRT, giving infinite loop.
builddir = ../../build

CDASKRDIR=$(top_builddir)/3rdParty/Cdaskr/solver/
CMINPACKDIR=$(top_builddir)/3rdParty/CMinpack/
LAPACKDIR=$(top_builddir)/3rdParty/dgesv/

RUNTIME_HEADERS = \
./omc_inline.h \
./math-support/blaswrap.h \
./openmodelica_func.h \
./openmodelica.h \
./openmodelica_types.h \
./simulation_data.h \
./ModelicaUtilities.h

RUNTIMELINEAR_HEADERS = ./linearization/linearize.h

RUNTIMEOPTIMZ_HEADERS = ./optimization/OptimizerData.h ./optimization/OptimizerLocalFunction.h ./optimization/OptimizerInterface.h

RUNTIMESIMULATION_HEADERS = ./simulation/modelinfo.h \
./simulation/options.h \
./simulation/simulation_info_json.h \
./simulation/simulation_input_xml.h \
./simulation/simulation_runtime.h

RUNTIMESIMRESULTS_HEADERS = ./simulation/results/simulation_result.h

RUNTIMESIMSOLVER_HEADERS = ./simulation/solver/delay.h \
./simulation/solver/epsilon.h \
./simulation/solver/mixedSystem.h \
./simulation/solver/linearSystem.h \
./simulation/solver/linearSolverLapack.h \
./simulation/solver/linearSolverTotalPivot.h \
./simulation/solver/model_help.h \
./simulation/solver/mixedSearchSolver.h \
./simulation/solver/nonlinearSystem.h \
./simulation/solver/nonlinearValuesList.h \
./simulation/solver/nonlinearSolverHomotopy.h \
./simulation/solver/nonlinearSolverHybrd.h \
./simulation/solver/stateset.h \
./simulation/solver/real_time_sync.h \
./simulation/solver/perform_simulation.c \
./simulation/solver/perform_qss_simulation.c \
./simulation/solver/dassl.h \
./simulation/solver/embedded_server.h \
./simulation/solver/omc_math.h \
./simulation/solver/events.h \
./simulation/solver/synchronous.h \
./simulation/solver/external_input.h\
./simulation/solver/solver_main.h

RUNTIMEMETA_HEADERS = ./meta/meta_modelica_builtin_boxptr.h \
./meta/meta_modelica_builtin_boxvar.h \
./meta/meta_modelica_builtin.h \
./meta/meta_modelica.h \
./meta/meta_modelica_data.h \
./meta/meta_modelica_mk_box.h \
./meta/meta_modelica_segv.h

RUNTIMEMETAGC_HEADERS = ./meta/gc/mmc_gc.h

RUNTIMEUTIL_HEADERS = \
./util/base_array.h \
./util/boolean_array.h \
./util/division.h \
./util/generic_array.h \
./util/index_spec.h \
./util/integer_array.h \
./util/java_interface.h \
./util/memory_pool.h \
./util/modelica.h \
./util/modelica_string.h \
./util/omc_error.h \
./util/omc_mmap.h \
./util/omc_msvc.h \
./util/omc_spinlock.h \
./util/read_matlab4.c \
./util/read_matlab4.h \
./util/read_csv.c \
./util/read_csv.h \
./util/libcsv.c \
./util/libcsv.h \
./util/read_write.h \
./util/real_array.h \
./util/ringbuffer.h \
./util/rtclock.h \
./util/simulation_options.h \
./util/string_array.h \
./util/uthash.h \
./util/utility.h \
./util/varinfo.h \
./util/list.h \
./util/rational.h \
./util/modelica_string_lit.h \
./util/omc_init.h \
./util/cJSON.h

RUNTIMEINITIALIZATION_HEADERS = \
./simulation/solver/initialization/initialization.h

# RUNTIME_HEADERS_FMU = \
# ./simulation/solver/initialization/initialization.h \
# ./simulation/solver/events.h \
# ./simulation/solver/solver_main.h \
# ./util/list.h \

.PHONY : clean all emcc emcc-clean emcc/libSimulationRuntimeC.so

all : install

all_objs : $(ALL_OBJS)

#recompile all if a header changes!
$(ALL_OBJS) : $(ALL_HEADERS)

libSimulationRuntimeC.a: $(ALL_OBJS) $(CDASKRDIR)/libcdaskr.a
	@# You have to remove the old archive first or it may contain old objects
	@rm -f $@
	cp -a $(CDASKRDIR)/libcdaskr.a $@
	$(AR) $@ $(ALL_OBJS)
	ranlib $@

libSimulationRuntimeC.so: $(ALL_OBJS) $(OPTIONAL_LIBS) Makefile.objs
	@rm -f $@
	$(CC) -shared -o $@ $(ALL_OBJS) $(LDFLAGS_SIM)

libSimulationRuntimeC.dylib: $(ALL_OBJS) $(OPTIONAL_LIBS) Makefile.objs
	@rm -f $@
	$(CC) -shared -o $@ $(ALL_OBJS) $(LDFLAGS_SIM) -undefined dynamic_lookup -install_name '@rpath/$@'

libSimulationRuntimeC.bc: $(ALL_OBJS) Makefile.objs
	@rm -f $@
	$(CC) -o $@ $(ALL_OBJS)

libOpenModelicaRuntimeC.a: $(BASE_OBJS) Makefile.objs
	@# You have to remove the old archive first or it may contain old objects
	@rm -f $@
	$(AR) $@ $(BASE_OBJS)
	ranlib $@

libOpenModelicaRuntimeC.so: $(BASE_OBJS) Makefile.objs
	@rm -f $@
	$(CC) -shared -o $@ $(BASE_OBJS) $(LDFLAGS)

libOpenModelicaRuntimeC.dylib: $(BASE_OBJS) Makefile.objs
	@rm -f $@
	$(CC) -shared -o $@ $(BASE_OBJS) $(LDFLAGS) -undefined dynamic_lookup -install_name '@rpath/$@'

libOpenModelicaFMIRuntimeC.a: $(FMIOBJSPATH) Makefile.objs
	@rm -f $@
	$(AR) $@ $(FMILIB) $(FMIOBJSPATH)
	ranlib $@

libOpenModelicaFMIRuntimeC.so: $(FMIOBJSPATH) Makefile.objs
	@rm -f $@
	$(CC) -shared -o $@ $(FMIOBJSPATH) $(LDFLAGS)

libOpenModelicaFMIRuntimeC.dylib: $(FMIOBJSPATH) Makefile.objs
	@rm -f $@
	$(CC) -shared -o $@ $(FMIOBJSPATH) $(LDFLAGS_SIM) -undefined dynamic_lookup -install_name '@rpath/$@'

$(METAOBJSPATH):%$(OBJ_EXT): %.c $(METAHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $<

meta/meta_modelica_catch$(OBJ_EXT): meta/meta_modelica_catch.c
	$(CC) -c $(CFLAGS) -o $@ $< -g

$(UTILOBJSPATH):%$(OBJ_EXT): %.c $(UTILHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $<

$(MATHOBJSPATH):%$(OBJ_EXT): %.c $(MATHHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) $(FPMATHFORTRAN) -o $@ $<

$(SOLVEROBJSPATH):%$(OBJ_EXT): %.c $(SOLVERHFILESPATH) $(RESULTSHFILESPATH) $(INITIALIZATIONHFILESPATH) $(OPTIMIZATIONHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $<

$(INITIALIZATIONOBJSPATH):%$(OBJ_EXT): %.c $(SOLVERHFILESPATH) $(INITIALIZATIONHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $<

$(RESULTSOBJSPATH):%$(OBJ_EXT): %.cpp $(RESULTSFILESPATH) $(COMMON_HEADERS)
	$(CXX) -c $(CFLAGS) -o $@ $<

$(SIMOBJSPATH):%$(OBJ_EXT): %.cpp linearization/linearize.cpp $(SIMHFILESPATH) $(COMMON_HEADERS)
	$(CXX) -c -Ilinearization/ $(CXXFLAGS) -o $@ $<

$(SIMOBJSPATHC):%$(OBJ_EXT): %.c $(SIMHFILESPATH) $(COMMON_HEADERS)
	@echo Deps: $(SIMHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $<

$(OPTIMIZATIONOBJSPATH):%$(OBJ_EXT): %.c $(OPTIMIZATIONHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $<

$(FMIOBJSPATH):%$(OBJ_EXT): %.c $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $<

util/socket$(OBJ_EXT): util/socket_win.cpp util/socket_unix.cpp

bootstrap-dependencies: $(LIBRUNTIME)
	cp -p $(LIBRUNTIME) $(builddir_lib)
	# copy header files
	cp -p $(RUNTIME_HEADERS) $(builddir_inc)/c/
	cp -p $(RUNTIMELINEAR_HEADERS) $(builddir_inc)/c/linearization/
	cp -p $(RUNTIMEOPTIMZ_HEADERS) $(builddir_inc)/c/optimization/
	cp -p $(RUNTIMESIMULATION_HEADERS) $(builddir_inc)/c/simulation/
	cp -p $(RUNTIMESIMRESULTS_HEADERS) $(builddir_inc)/c/simulation/results/
	cp -p $(RUNTIMESIMSOLVER_HEADERS) $(builddir_inc)/c/simulation/solver/
	cp -p $(RUNTIMEINITIALIZATION_HEADERS) $(builddir_inc)/c/simulation/solver/initialization/
	cp -p $(RUNTIMEMETA_HEADERS) $(builddir_inc)/c/meta/
	cp -p $(RUNTIMEMETAGC_HEADERS) $(builddir_inc)/c/meta/gc/
	cp -p $(RUNTIMEUTIL_HEADERS) $(builddir_inc)/c/util/

install: bootstrap-dependencies $(LIBSIMULATION) $(LIBFMIRUNTIME) $(ALL_OBJS) sourcedist
	# copy libraries
	cp -p $(LIBSIMULATION) $(LIBFMIRUNTIME) $(builddir_lib)
	test ! -f libSimulationRuntimeC.bc || cp libSimulationRuntimeC.bc $(builddir_lib)/emcc/libSimulationRuntimeC.so
	# copy fmi stuff
	cp -p $(RUNTIME_HEADERS_FMU) ../fmi/export/fmi1/*.h \
	   ../fmi/export/fmi1/fmu1_model_interface.c $(builddir_inc)/c/fmi1
	cp -p ../fmi/export/fmi2/*.h \
	   ../fmi/export/fmi2/fmu2_model_interface.c $(builddir_inc)/c/fmi2
	# copy java interface stuff
	@$(MAKE) -C ../java_interface -f $(LIBMAKEFILE) && \
	$(MAKE) -C ../java_interface -f $(LIBMAKEFILE) install || \
	$(MAKE) -C ../java_interface -f $(LIBMAKEFILE) install-nomodelica

clean:
	rm -f $(ALL_PATHS_CLEAN_OBJS) fmi/*.o *.a *.so optimization/*/*.o
	(! test -f $(EXTERNALCBUILDDIR)/Makefile) || make -C $(EXTERNALCBUILDDIR) clean
	(! test -f $(EXTERNALCBUILDDIR)/Makefile) || make -C $(EXTERNALCBUILDDIR) distclean

sourcedist: sourcedist1 sourcedist2
sourcedist1:
	$(MAKE) -f $(LIBMAKEFILE) OMC_MINIMAL_RUNTIME=1 OMC_FMI_RUNTIME=1 sourcedist_internal
sourcedist2:
	$(MAKE) -C ../fmi/export/buildproject -f $(defaultMakefileTarget)

sourcedist_internal:
	mkdir -p $(builddir_inc)/c/external_solvers external_solvers
	cp \
	 $(CMINPACK_OBJS:%=$(CMINPACKDIR)/%.c) \
	 $(LAPACK_OBJS:%=$(LAPACKDIR)/lapack/%.c) \
	 $(BLAS_OBJS:%=$(LAPACKDIR)/blas/%.c) \
	 $(LIBF2C_OBJS:%=$(LAPACKDIR)/libf2c/%.c) \
	 "./external_solvers/"
	cp \
	 "$(CMINPACKDIR)/minpack.h" "$(CMINPACKDIR)/cminpack.h" \
	 "$(LAPACKDIR)/include/blaswrap.h" \
	 "$(LAPACKDIR)/include/clapack.h" \
	 "$(LAPACKDIR)/include/f2c.h" \
	 "$(builddir_inc)/c/external_solvers"
	cd $(builddir_inc)/c/ && mkdir -p $(ALL_PATHS)
	(D=`pwd` && cd $(builddir_inc)/c/ $(FMI_ME_OBJS:%.o= && (OMCFILE=% && cp $$D/$$OMCFILE.c $$OMCFILE.c)))
	cp Makefile.objs $(builddir_inc)/c/
	rm -r ./external_solvers
