ifeq ($(OS),Windows_NT)
  SED = sed
else
  UNAME := $(shell uname)
  ifeq ($(UNAME),Darwin)
    SED = gsed
  else
    SED = sed
  endif
endif

ifeq ($(wildcard $(OMC)),)
all:
	$(MAKE) -f $(defaultMakefileTarget) bootstrap-from-tarball
else
all:
	$(MAKE) -f $(defaultMakefileTarget) --no-print-directory generate-files-in-steps
	$(MAKE) -f $(defaultMakefileTarget) --no-print-directory install INCLUDESOURCES=1
endif

generate-files-in-steps:
	$(MAKE) -f $(defaultMakefileTarget) templates scripting
	$(MAKE) -f $(defaultMakefileTarget) Makefile.sources
	$(MAKE) -f $(defaultMakefileTarget) interfaces INCLUDESOURCES=1
	$(MAKE) -f $(defaultMakefileTarget) Makefile.depends INCLUDESOURCES=1
	$(MAKE) -f $(defaultMakefileTarget) generate-files INCLUDESOURCES=1 INCLUDEDEPENDS=1

.PHONY: interfaces generate-files

GEN_DIR=build/

PATCH_SOURCES=$(SED) -i 's/ = omc_assert_function/__attribute__((noreturn)) = omc_assert_function/' build/_main.c

PATCHES := $(patsubst %.patch.xz,%.patch,$(wildcard patches/*.patch.xz))

%.patch: %.patch.xz
	xz --keep --decompress --force $<

bootstrap-from-tarball: $(PATCHES)
	$(MAKE) -f $(defaultMakefileTarget) clean OMC=.omc
	tar xJf bootstrap-sources.tar.xz
	# Patch _main.c to avoid a new tarball
	$(PATCH_SOURCES)
	cd build && for x in ../patches/*.patch; do patch -i "$$x"  "`basename $$x | $(SED) 's/\([.][0-9]*\)\?[.]patch/.c/'`" || exit 1; done
	# We have not compiled OpenModelicaScriptingAPI.mo yet
	touch build/OpenModelicaScriptingAPI.h
	$(MAKE) -f $(defaultMakefileTarget) install INCLUDESOURCES=1 OMC=.omc
	@echo "Bootstrapping phase 1/3 completed"
	$(MAKE) -f $(defaultMakefileTarget) clean OMC=$(BOOTSTRAP_OMC)
	OPENMODELICA_BACKEND_STUBS=1 $(MAKE) -f $(defaultMakefileTarget) generate-files-in-steps OMC=$(BOOTSTRAP_OMC)
	# Patch _main.c to avoid a new tarball
	$(PATCH_SOURCES)
	# We have not compiled OpenModelicaScriptingAPI.mo yet
	touch build/OpenModelicaScriptingAPI.h
	$(MAKE) -f $(defaultMakefileTarget) install INCLUDESOURCES=1 OMC=$(BOOTSTRAP_OMC)
	@echo "Bootstrapping phase 2/3 completed"
	$(MAKE) -f $(defaultMakefileTarget) clean OMC=$(BOOTSTRAP_OMC)
	$(MAKE) -f $(defaultMakefileTarget) --no-print-directory -C $(TOP_DIR)/Compiler/Script OMC=$(BOOTSTRAP_OMC) clean
	$(MAKE) -f $(defaultMakefileTarget) generate-files-in-steps OMC=$(BOOTSTRAP_OMC)
	$(MAKE) -f $(defaultMakefileTarget) install INCLUDESOURCES=1 OMC=$(BOOTSTRAP_OMC)
	@echo "Bootstrapping phase 3/3 completed"

bootstrap-from-compiled: make-separate

make-bootstrap-tarball: clean
	test ! -f Makefile.sources || rm Makefile.sources
	test ! -f Makefile.depends || rm Makefile.depends
	OPENMODELICA_BACKEND_STUBS=1 $(MAKE) -f $(defaultMakefileTarget) generate-files-in-steps
	rm -rf $(GEN_DIR)/*.mo $(GEN_DIR)/tmp $(GEN_DIR)/*.deps $(GEN_DIR)/*.mos $(GEN_DIR)/*.stamp
	sed -i -e "s/^ *//" -e "/^[/][/]/d" -e "/^#line /d" -e "s/ *[/][*].*[*][/]\([;)]\?\) *$$/\1/" -e "s/^ *[/][*].*[*][/]\(;\?\) */\1/" -e "/^ *$$/d" $(GEN_DIR)/*.c $(GEN_DIR)/*.h
	tar cf bootstrap-sources.tar $(GEN_DIR) Makefile.sources
	xz --best --force bootstrap-sources.tar

templates:
	$(MAKE) -f $(defaultMakefileTarget) --no-print-directory -C $(TOP_DIR)/Compiler/Template

scripting:
	$(MAKE) -f $(defaultMakefileTarget) --no-print-directory -C $(TOP_DIR)/Compiler/Script

clean:
	rm -rf $(GEN_DIR)
	rm -f Makefile.sources LoadCompilerInterface.mos Makefile.depends

ifeq ($(INCLUDESOURCES),1)
include Makefile.sources
endif

ifeq ($(INCLUDEDEPENDS),1)
include Makefile.depends
endif

generate-files: $(ALL_INTERFACES:%.stamp.mo=%.stamp) $(GEN_DIR)_main.c
	@test ! -z "$^" || (echo "*** Empty dependencies for $@"; false)

ALL_OBJECTS=$(ALL_INTERFACES:%.stamp.mo=%.o) $(ALL_INTERFACES:%.stamp.mo=%_records.o)

compile-files: $(ALL_OBJECTS) $(GEN_DIR)_main.o
	@test ! -z "$^" || (echo "*** Empty dependencies for $@"; false)

interfaces: $(ALL_INTERFACES) $(ALL_SOURCES)

%.stamp.mo:
	@mkdir -p build
	@echo 'echo(false);inFile := "$<";outFile := "$@.tmp"; runScript("GenerateInterface.mos"); print(getErrorString()); print("Something went horribly wrong for $@\\n"); exit(1);' > "$@.mos"
	$(OMC) -n=1 $@.mos
	@touch $@
%.interface.mo: %.stamp.mo

ifeq ($(wildcard $(OMC)),)
else
Makefile.sources: LoadCompilerSources.mos MakeSources.mos
	$(OMC) -n=1 MakeSources.mos
	mv Makefile.sources.tmp Makefile.sources
	mv LoadCompilerInterface.mos.tmp LoadCompilerInterface.mos

LoadCompilerInterface.mos: Makefile.sources
	@test -f $@ || (rm -f $< && $(MAKE) -f $(defaultMakefileTarget) $<)
Makefile.depends: MakeDepends.mos LoadCompilerInterface.mos Makefile.sources $(ALL_INTERFACES:%.stamp.mo=%.interface.mo)
	@rm -f $@
	$(OMC) -n=1 $<
endif

$(GEN_DIR)%.stamp:
	@test ! -z "$^" || (echo Empty dependencies for $@ ; false)
	@echo 'echo(false);files:={"'`echo $^ | sed 's/ /","/g'`'"};mainClass:=$$TypeName('`basename $@ | sed "s/[.]stamp//"`');runScript("CompileFile.mos");print("Something went horribly wrong for '$@'\\n");exit(1);' > $@.mos
	$(OMC) -n=1 $@.mos
	@touch $@

$(GEN_DIR)_main.c:
	$(OMC) GenerateEntryPoint.mos

$(GEN_DIR)_main.o: $(GEN_DIR)_main.c
	$(CC) -DOMC_ENTRYPOINT_STATIC= -c $(GEN_DIR)_main.c -o  $(GEN_DIR)_main.o $(CFLAGS) $(CPPFLAGS)

$(GEN_DIR)_main_omc.c: $(GEN_DIR)_main.c
	cp -a $^ $@

$(GEN_DIR)_main_omc.o: $(GEN_DIR)_main_omc.c
	$(CC) -c $(GEN_DIR)_main_omc.c -o  $(GEN_DIR)_main_omc.o $(CFLAGS) $(CPPFLAGS)

$(OMHOME)/$(LIB_OMC)/libOpenModelicaCompiler$(SHREXT): $(ALL_OBJECTS) $(OMHOME)/$(LIB_OMC)/libomcruntime.a $(OMHOME)/$(LIB_OMC)/libomparse.a $(GEN_DIR)_main_omc.o
	@test ! -z "`echo $(ALL_OBJECTS)`" || (echo Empty dependencies for $@ ; false)
	$(CC) -shared $(RPATH) $(INSTALL_NAME) -o $@ $^ $(LDFLAGS)
	test ! "$(SHREXT)" = ".dylib" || install_name_tool -id @rpath/libOpenModelicaCompiler.dylib $@

ifeq ($(STATIC),)
#shared
$(GEN_DIR)omc$(EXE_EXT): $(OMHOME)/$(LIB_OMC)/libOpenModelicaCompiler$(SHREXT) $(GEN_DIR)_main_omc.o $(GEN_DIR)_main.o
	$(CC) $(GEN_DIR)_main.o $(RPATH) $(CFLAGS) $(CPPFLAGS) -o $@ $(LDFLAGS) -lOpenModelicaCompiler
install: $(GEN_DIR)omc$(EXE_EXT) install-interface
	cp -a $< $(OMHOME)/bin/
	cp -a $(OMHOME)/$(LIB_OMC)/libOpenModelicaCompiler$(SHREXT) $(OMHOME)/bin/

else
#static
$(GEN_DIR)omc$(EXE_EXT): $(ALL_OBJECTS) $(GEN_DIR)_main.o $(GEN_DIR)_main_omc.o $(OMHOME)/$(LIB_OMC)/libomcruntime.a $(OMHOME)/$(LIB_OMC)/libomparse.a
	@test ! -z "`echo $(ALL_OBJECTS)`" || (echo Empty dependencies for $@ ; false)
	$(CC) $(GEN_DIR)_main.o $(RPATH) $(CFLAGS) $(CPPFLAGS) -o $@ $(GEN_DIR)_main_omc.o $(ALL_OBJECTS) $(LDFLAGS)
install: $(GEN_DIR)omc$(EXE_EXT) install-interface
	cp -a $(GEN_DIR)omc$(EXE_EXT) $(OMHOME)/bin/

endif

install-interface:
	cp -a $(GEN_DIR)OpenModelicaScriptingAPI.h $(OMHOME)/include/omc/scripting-API
